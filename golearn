#  GO开发

# GO基础（基础阶段）

语言基础：包括基本语法、数据类型、变量、常量、运算符、流程控制语句等
函数：包括函数的定义和参数传递、匿名函数等
数组、切片和map：包括数组、切片和map的定义、初始化、添加、删除操作
结构体和指针：包括定义、访问、操作
接口和类型断言：包括接口定义、类型断言操作
并发编程：包括goroutine、channel、锁等
文件和网络编程：包括文件和网络编程的基本概念和实现方式

## 01安装环境到第一个程序

GO语言下载：https://studygolang.com/dl
VScode下载：https://code.visualstudio.com/
安装VScode拓展：Chinese、go

#### 编写代码

##### GOPROXY(go代理)

命令行执行，就可以下载相关包/插件了

~~~go
go env -w GOPROXY=https://goproxy.cn,direct
~~~

##### go mod init

我们需要go module管理项目依赖，所以在创建项目时通过以下命令进行初始化，会在项目根目录下生成go.mod文件

~~~go
go mod init hello
go mod init github.com/xiaoyang/hello
~~~

##### go mod tidy

如果需要引用别人库的代码，需要用go mod tidy将引用的包下载下来，再进行go build

~~~go
package main
import (
	"fmt"
	"github.com/q1mi/hello"
)
func main() {
	fmt.Println("hello go!")
	hello.SayHi()
}
~~~

或者主动下载第三方库

~~~go
go get github.com/q1mi/hello
~~~



##### go build

表示将源代码编译为可执行文件(exe)，记得保存代码
在hello目录中的终端执行：（生成hello.exe）

~~~go
go build
go build -o xxx.exe
~~~

在其他目录中的终端执行命令：

~~~go
go build hello
~~~

再执行exe文件：

~~~go
.\hello.exe  //终端为power shell
hello.exe  //终端为cmd
~~~

如果只有一个文件，就执行

~~~go
go run mian.go
~~~

#### 跨平台编译

如果我是windows下编译Linux的可执行文件，需要怎么做呢：
只需要指定目标操作系统的平台和处理器框架即可，windows平台的cmd下按如下方式指定环境变量

~~~go
SET CGO_ENABLED=0 //禁用CGO 很多C语言的扩展就不能直接用
SET GOOS=linux //目标平台是linux
SET GOARCH=amd64  //目标处理器架构时amd64
~~~

Linux下编译Mac和Windows平台64位可执行程序

~~~go
CGO_ENABLED=0 GOOS=darwin GOARCH=amd64 go build
CGO_ENABLED=0 GOOS=windows GOARCH=amd64 go build
~~~

#### 设置环境变量

~~~go
go env -w GOPROXY=https://goproxy.cn,direct
export GOPROXY=https://goproxy.cn,direct
~~~

#### 是否用第三方包

不用第三方包：
随便一个目录新建项目，再编译即可

~~~go
go mod init xxx
go build; xxx.exe
go run main.go  //或者
~~~

用第三方包：
在项目下面要有go.mod文件
再配置依赖：go mod tidy

## 02常量与变量

#### 标识符

只能以字母和下划线开头

#### 关键字

go语言中有25个关键字

~~~go
var func const iota
//慢慢补
~~~

### 01变量声明

同一个作用域不允许重复声明
go中声明必须使用
变量声明格式为：

~~~go
var 变量名 变量类型
~~~

~~~go
func main() {
    var name string  //默认为空
    var age int  //默认为0
    var is0k bool  //默认为false
    var a float32  //默认为0
    fmt.Println(name, age, is0k, a)
}
~~~

批量声明：

~~~go
var (
	a string
    b int 
    c bool
    d float32
)
fmt.Println(a, b, c, d)
~~~

声明并赋值

~~~go
var 变量名 变量类型 = 赋值
~~~

~~~go
var age int = 23
var name1, age1 = "elk", 23
~~~

#### 类型推导

编译器根据变量初始值推导出类型

~~~go
var 变量名 = 赋值  
~~~

#### 短变量声明

在函数内部，可以使用更简略的 := 方式声明并初始化变量

~~~go
func main() {
    n := "xiaoming"
    a := 100
    fmt.Println(n, m)
}
~~~

#### 匿名变量

在使用多重赋值时，如果想要忽略某个值，可以使用匿名变量，匿名变量用下划线 _ 表示

~~~go
func foo() (int, string) {
    return 10, "xiaoming"
}
func main() {
    x,_ := foo()
    fmt.Println("x=", x)
}
~~~

##### 注意事项

函数外的每个语句都必须从关键字开始（var, const, func)
`:= ` 不能用于函数外
`_ ` 多用于占位，表示忽略值

### 02常量声明

#### const

把var换成const，常量在定义时必须赋值

~~~go
const pi = 3.141
const e = 2.718
~~~

#### iota

是常量计数器，只能在常量表达式中使用
在const关键字出现时被重置为0，const每新增一行iota值加1

~~~go
const (
	n1 = iota //0
    n2  //1
    n3  //2
    n4  //3
)
const n1 = iota //0
const n2 = iota //0
const n3 = iota //0
const n4 = iota //0
fmt.Println(n1, n2, n3, n4)
~~~

利用`iota`定义数量级

~~~go
const (
	_ = iota
    KB = 1 << (10 * iota)  //将1左移10位为1024
    MB = 1 << (10 * iota)  //<<为位运算符
    GB = 1 << (10 * iota)
    TB = 1 << (10 * iota)
    PB = 1 << (10 * iota)
)
fmt.Println(KB, MB, GB, TB, PB)
~~~

~~~go
const (
	a, b = iota + 1, iota + 2  //iota=0
    c, d  //iota=1
    e, f  //iota=2
)
~~~

## 03基本数据类型

| 类型    | 描述                                        |
| ------- | ------------------------------------------- |
| uint8   | 无符号8位整型（0到255）                     |
| uint64  |                                             |
| int8    | 有符号8位整型（-128到127）                  |
| int64   |                                             |
|         |                                             |
| uint    | 32位操作系统就是uint32,64位操作系统位uint64 |
| int     | 32位操作系统位int32, 64位操作系统为int64    |
| uintptr | 无符号整型，用于存放一个指针                |

注意事项：比如使用`len()`函数是返回一个`int`类型，不会明确说int64还是int32

#### 八进制和十六进制

~~~go
n := 10
fmt.Printf("%b/n", n)  //二进制
fmt.Printf("%d/n", n)  //十进制
m := 0.75
fmt.Printf("%o/n", m)  //八进制

f := 0xff
fmt.Printf("%d/n", n)  //十进制
fmt.Printf("%x/n", n)  //十六进制

var age uint8 
~~~

#### 浮点型

GO语言支持两种浮点型数，`float32` 和 `float64`(小数点7和15位)

~~~go
fmt.Println(math.MaxFloat32)
fmt.Println(math.MaxFloat64)
~~~

#### 复数

complex64和complex128
复数有实部和虚部，complex64实部和虚部位32位，complex64实部和虚部位64位

~~~go
var c1 complex64
c1 = 1 + 2i
var c2 complex128
c2 = 2 + 3i
fmt.Println(c1)
fmt.Println(c2)
~~~

#### 布尔值

布尔值类型默认为false
GO语言中不允许将整型强制转换为布尔型
布尔型无法参加数值运算，也无法与其他类型进行转换

#### 字符串

字符串为`""`

组成字符串的元素为字符`''`

~~~go
s1 := "hello beijing"
s2 := "你好 北京"
~~~

| 转义符 | 含义                     |
| ------ | ------------------------ |
| `\r`   | 回车符                   |
| `\n`   | 换行符                   |
| `\t`   | 制表符(在前面留下点空间) |
| `\'`   | 单引号                   |
| `\"`   | 双引号                   |
| `\\`   | 反斜杠                   |

##### 多行字符串

~~~go
s3 := '
多行
字符串
输出
'
~~~

##### 字符串常见操作

~~~go
s := "hello"
fmt.Println(len(s))  //5
s2 := "hello你好"
fmt.Println(len(s))  //11 一个中文有三个

//拼接字符串
fmt.Println(s + s2)
s3 := fmt.Sprintf("%s%s", s, s2)
//字符串分割
s4 := "how do you do"
fmt.Println(strings.Split(s4, " "))  //[how do you do]
fmt.Printf("%T\n", strings.Split(s4, " "))  //[]string 字符串分割
//判断是否包含
fmt.Println(strings.Contains(s4, "do"))
//判断前缀
fmt.Println(strings.HasPrefix(s4, "how"))
//判断后缀
fmt.Println(strings.HasSuffix(s4, "how"))
//判断子串位置
fmt.Println(strings.Index(s4, "do"))
//判断最后字串位置
fmt.Println(strings.LastIndex(s4, "do"))
//join
s5 := []string{"how", "do", "you", "do"}
fmt.Println(s5)  //[how do you do]
fmtPrintln(strings.Join(s5, "+"))  //how+do+you+do
~~~

##### byte和rune

byte uint8的别名 ASCII码，这是涉及 字符的
rune int32的别名

~~~go
//统计字符个数
// 输入："小明的英文名叫jack"
// 返回值：11
func count(s string) int {
    // write code here
    arr := []rune(s)
    ans := len(arr)
    return ans
 
}
~~~



~~~go
var c1 byte = 'c'
var c2 rune = 'c'
~~~

举例（for range的优势）

~~~go
s := "hello悟空"
for i := 0; i < len(s); i++ {
    fmt.Printf("%c\n", s[i])  //按照字节循环
}
for _, r := range s {
    fmt.Printf("%c\n", r)  //按照字符循环
}
~~~

#### 类型转换

~~~go
import "fmt"
import "strconv"

stra = fmt.Sprinf("%d", a)
inta, err := strconv.ParseInt(a, 10, 64)
//返回值和是否错误，参数是a,10进制，int64
~~~

 %v  按值的本来值输出  

 %+v 在 %v 基础上，对结构体字段名和值进行展开  

 %#v 输出 Go 语言语法格式的值  

 %T  输出 Go 语言语法格式的类型和值  

 %%  输出 % 本体  

 %b  整型以二进制方式显示  

 %o  整型以八进制方式显示  

 %d  整型以十进制方式显示  

 %x  整型以十六进制方式显示  

 %X  整型以十六进制、字母大写方式显示  

 %U  Unicode 字符  

 %f  浮点数  

 %p  指针，十六进制方式显示  





## 04运算符

算数运算符、关系运算符、逻辑运算符、位运算符、赋值运算符

~~~go
//算数运算符
+ - * / %  //加减乘除求余

//关系运算符
> < == >= <= !=

//逻辑运算符
&& and  || or ! not    fmt.Println(!(10 > 5))

//位运算符
&  两个都为1，结果为1
|  有一个为1，结果为1
^  两个不一样为1
<< 左移
>> 右移
a := 1    //001
b := 5    //101
fmt.Println(a & 1)  //001 => 1
fmt.Println(a | 1)  //101 => 5
fmt.Println(a ^ 1)  //100 => 4
fmt.Println(1 << 10)  //1024

//赋值运算符
var a int
a = 5
a += 5  //a = a + 5
fmt.Println(a)
~~~

## 05流程控制

###   if else(分支结构)

~~~go
//基本写法
var score = 65
if score >= 90 {
    fmt.Println("A")
}
else if score > 75 {
    fmt.Println("B")  
} else {
    fmt.Println("C")
}
~~~

~~~go
//if特殊写法
if score := 65; score >= 90 {
    fmt.Println("A")
} else if score > 75 {
    fmt.Println("B")  
} else {
    fmt.Println("C")
}
fmt.Println(score)  //无法生效
~~~

### for(循环结构)

~~~go
for i := 0; i < 10; i ++ {
    fmt.Println(i)
}
//省略初始语句，但要保留分号
var i = 0
for ; i < 10; i ++ {
    fmt.Println(i)
}
//省略初始语句，但要保留分号
var i = 10
for i > 0{
    fmt.Println(i)
    i--
}
//无限循环
for { }
~~~

break：跳出for循环

continue：继续下一次循环

~~~go
for i := 0; i < 5; i ++ {
    if i == 3 {
        continue
    }
    fmt.Println(i)  //0 1 2 4 
}
~~~

### for range(键值循环)

GO语言中可以使用`for range`遍历数组、切片、字符串、map及通道
数组、切片、字符返回索引值
map返回键和值
通道（channel）只返回通道内的值
`range` 返回的是 Unicode 代码点（`rune`）。对于非 ASCII 字符（比如中文），`a[i]` 会返回多个字节的一部分，这样无法正确输出完整的字符。

~~~go
func main() {
	a := "abc英语"
	for i := 0; i < len(a); i++ {
		fmt.Printf("%c\n", a[i])
	}
	for _, v := range a {
		fmt.Printf("%c\n", v)
	}
}
~~~



### switch case

~~~go
fnger := 3
switch finger {
    case 1:
        fmt.Println("大拇指")
    case 2:
        fmt.Println("食指")
    default:
        fmt.Println("无效输入")
}
~~~

~~~go
num := 5
switch num {
    case 1,3, 5, 7, 9:
        fmt.Println("奇数")
    case 2, 4, 6, 8, 10:
        fmt.Println("偶数")

}
~~~

### goto(跳转到指定标签)

`goto`语句通过标签进行代码间的无条件转换，`goto`可以在快速跳出循环，简化代码，比如双层嵌套循环要跳出时：

```go
func gotoDemo1() {
	var breakFlag bool
	for i := 0; i < 10; i++ {
		for j := 0; j < 10; j++ {
			if j == 2 { // 设置退出标签breakFlag =truebreak
				breakFlag = true
				break
			}
			fmt.Printf("%v-%v\n", i, j)
		}
		//外层for循环判断
		if breakFlag {
			break
		}
	}
}
```

使用`goto`后：

~~~go
func gotoDemo2() {
	for i := 0; i < 10; i++ {
		for j := 0; j < 10; j++ {
			if j == 2 { // 设置退出标签breakFlag =truebreak
				goto breakTag
			}
			fmt.Printf("%v-%v\n", i, j)
		}
	}
breakTag:
	fmt.Println("结束for循环")
}
~~~

## 06Array(数组)

### 数组定义

数组是同一个类型的集合，GO语言中，数组从声明时确定，使用时可以修改数组成员，但大小不可变化
下标从0开始，最后一个元素下标为`len-1`，访问越界会触发panic

~~~go
var a [3]int  //对应0值
var b [4]int
~~~

初始化

~~~go
var cityArray = [4]string{"bei ", "shang", "guang", "shen"}

//采用索引初始化
var langArray = [...]string{1:"Golang", 3:"Python", 5:"Java"}  //创5个元素
~~~

遍历

~~~go
//使用for循环遍历
var cityArray = [4]string{"bei", "shang", "guang", "shen"}
for i := 0; i < len(cityArray); i++ {
    fmt.Println(catyArray[i])
}

//使用for range遍历
for index, value := range cityArray {
    fmt.Println(index, value)
}
~~~

### 多维数组

#### 二维数组的定义

~~~go
a := [4][2]string{
    {"bei", "xi"},
    {"shang", "hang"},
    {"chong", "cheng"},
    {"guang", "shen"}
}
~~~

#### 二维数组的遍历

数组是值类型，不管是传参或变量的赋值，它是把数组的值完完整整的拷贝一份，再赋值给其他变量

~~~GO
for index, v1 := range a {
    for index, v2 := range v1 {
        fmt.Println(v2) 
    }
}
~~~

#### 练习题

##### 数组练习（两数之和）

1.求数组[1，3，5，7，8]所有元素的和
2.找出数组中和为指定值的两个元素的下标，比如从数组[1，3，5，7，8]中找出和为8的两个元素的下标分别为
(0,3)和(1,2)。

~~~go
//所有元素和
func main() {
	var numArray = [5]int{1, 3, 5, 7, 8}
	var sum = 0
	for i := 0; i < len(numArray); i++ {
		sum = sum + numArray[i]
	}
	fmt.Println(sum)
}
//找满足条件元素下标
func main() {
	var numArray = [5]int{1, 3, 5, 7, 8}
	for i := 0; i < len(numArray); i++ {
		for j := i; j < len(numArray); j++ {
			if numArray[i]+numArray[j] == 8 {
				fmt.Println(i, j)
			}
		}
	}
}

~~~

##### 不同类型输出

~~~go
	var c string = "wang"
	var a int
	var b bool
	fmt.Printf("%d\n%t\n%s", a, b, c)
~~~

##  07切片

### 为什么用切片

数组是固定大小，无法动态调整；切片可按需添加、删除元素
当数组赋值给另一个变量或传递函数时，会创建数组副本，而不是引用，会导致不必要的开销；切片时引用类型，是对底层数组的引用；而不是数据的副本

切片时一个拥有相同类型元素的可变长度序列，他时基于数组类型的封装，支持扩容
切片时一个引用类型，它内部结构包含`地址`、`长度`和`容量`

### 切片定义及初始化

切片的本质是对底层数组的一个封装
切片是由数组地址，切片容量和长度
切片不能直接比较

~~~go
var name []T  //T表示数据类型

var a []string  //声明一个切片
var b = []int  //声明一个整型切片并初始化
var c = []bool{false, true}  //声明一个bool类型并初始化
~~~

基于数组得到切片

~~~go 
func main() {
    a := [5]int{55, 56, 7, 8, 9}
    b := a[1:4]  //左闭右开
    fmt.Printf("%T\n", a)  //[5]int
    fmt.Printf("%T\n", b)  //[]int
}
~~~

make函数构造切片

~~~go
d := make([]int, 5, 10)  //切片类型 长度 容量
~~~

通过len获取切片的长度
通过cap获取切片的容量
容量不够会动态扩充

~~~go
fmt.Println(len(d))
fmt.Println(cap(d))  
~~~

### nil

nil是go语言中引用类型的0值，比如int为0，string为空串
比如切片，map的零值为nil

~~~go
//他们的值、长度、容量相同
var a []int  //声明int类型切片  nil
var b = []int{}  //声明并初始化  不是nil
c := make([]int, 0)  //make构造  不是nil
~~~

### 判断切片是否为空

通过`len(a)`的长度判断为空，而不是`a == nil`判断

### 切片的赋值拷贝

~~~go
a := make([]int, 3)
b := a
b[0] = 100  //a 和 b公用同一个数组
~~~

### 切片的遍历

与数组一致

### 切片的增删

#### append()

容量会以2的倍数为单位相加`cap(b)`，如果超过1024，则加其1/4，所以尽量少超容量

~~~go
//方法1.使用append()函数
var a = []int{} 
a = append(a, 100) 

//方法2.使用make函数
a = make([]int, 1) 
a[0] = 100

//方法3.直接初始化切片指定元素
a := []int{100}

//追加多个元素
a = append(a, 1, 3, 3,4,5)
a = append(a, b...)
~~~

#### copy()

~~~go
a := []int{1, 2, 3}
b := make([]int, 3, 5)
copy(b, a)
~~~

#### 切片的删除

需要预先知道删除元素的索引位置，然后截取前后子切片

~~~go
a := []string{"bei", "shang", "guang", "shen"}
a = append(a[0:2], a[3:]...)
~~~

## 08map

map是一种**无序**的基于`key-value`的数据结构，引用类型，必须初始化才能使用

### 定义和初始化

~~~go
var a map [string]int  //key为string，int为value

//初始化
a = make(map[string]int, 8)

//添加键值对
a["大大"] = 100
a["小小"] = 200
fmt.Printf("%T/n", a)  //map[string]int

//声明并初始化
b := map[int]bool{
    1:true,
    2:false
}

//元素类型为map切片
var mapSlice = make([]map[string]int, 8, 8)  //完成切片的初始化
mapSlice[0] = make(map[string]int, 8)  //完成map的初始化
mapSlice[0]["小小"] = 100
fmt.Println(mapSlice)

//值为切片的map
var sliceMap = make(map[string][]int, 8)  //只完成map的初始化

//判断在不在
value, ok := scoreMap("张二狗子")

//遍历 for range
for k, v := range scoreMap {
    fmt.Println(k, v )
}

//删除
delete(scoreMap, "小小")

var scoreMap = make(map[string]int, 100)  //添加50个键值对
for i := 0; i < 50; i++ {
    key := fmt.Sprintf("stu%02d", i)
    value := rand.Intn(100) //0-99随机数
    scoreMap[key] = value
}

//按key从小到大顺序遍历scoreMap
//scoreMap: stu06 25
keys := make([]string,0, 100)
for k, _ := range scoreMap {
    keys = append(keys, k)
}
sort.Strings(keys)  //对keys做排序

for _, key := range keys{
    fmt.Println(key, scoreMap(key))
}
~~~

### 练习（统计单词出现次数）

~~~go
//0.定义一个map[string]int
//1.字符串中都有哪些单词
//2.遍历单词做统计
var s = "how do you do"
var wordCount = make(map[string]int, 8)
words := Strings.Split(s, " ")  //返回切片

for _, word := range words {
    v, ok :=wordCount(word)  // 返回word的值和是否存在
    if ok {
        wordCount = v + 1
    }else {
        wordCount[word] = 1
    }
}
~~~

## 09函数

~~~go
func intSum1(a int, b int) int {
    ret := a + b
    return ret
}

//函数简写
func intSum2(a int, b int) (ret int) {
    ret = a + b
    return
}

//参数简写
func intSum5(a, b int) int {
    
}

//定义多个返回值
func intSum6(a, b int) (sum, sub int) {
    return
}
~~~

#### 函数接收可变参数

在参数后面加`...`表示可变参数，类型为切片类型
固定参数可可变参数同时出现时，可变参数要放在最后(最少传递零个)
函数中没有默认参数

~~~go
func intSum3(a ...int) {
    arg := 0
    for _, arg = range a {
        ret = ret + arg
    }
    return ret
}

for intSum4(a int, b ...int) {
    
}
~~~

#### defer语句

先进后出（栈）
处理资源释放问题：资源清理，文件关闭，记录时间等等

~~~go
//延迟执行
func main() {
    fmt.Println("start...")
    defer fmt.Println(1)
    defer fmt.Println(2)
    defer fmt.Println(3)
    fmt.Println("end...")
}
~~~

### 函数进阶

#### 变量作用域

全局变量

同名变量，先局部后全局

若想返回局部变量，则通过得到返回值赋值给变量

#### 函数作为变量和参数

~~~go
//函数可以作为变量
func main() {
    abc := testGlobal
    fmt.Printf("%T\n", abc)  //func()
}

//函数作为参数
func add(x, y int) int {
    return x + y
}

func calc(x, y int, op func(int, int) int) int {
    return op(x, y)
}
~~~

